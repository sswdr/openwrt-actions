# 使用导出的编译环境编译

name: test-build-backup-env

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: 5.10-lede+kenzok8-max-v3.config
  TZ: Asia/Shanghai
  UPLOAD_BIN_DIR: true

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 服务器信息
      run: |
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "--------------------------硬盘信息--------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        # 清理多余文件，腾出磁盘空间
        docker rmi $(docker images -q)
        # sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell mysql* php* mssql-tools msodbcsql17 android*
        # sudo rm -rf /etc/mysql /etc/php /swapfile

    - name: 下载releases环境
      id: downreleases
      run: |
        cd /
        sudo rm -rf workdir
        sudo wget -P / https://github.com/sswdr/openwrt-actions/releases/download/backup_build_env_2022.04.25.1999/workdir.tar.gz
        cd /
        sudo tar -zxvf workdir.tar.gz
        sudo chown $USER:$GROUPS /workdir
        sudo rm -rf workdir.tar.gz
        cd /home/runner/work
        sudo wget -P /home/runner/work https://github.com/sswdr/openwrt-actions/releases/download/backup_build_env_2022.04.25.1999/home.tar.gz
        sudo tar -zxvf home.tar.gz
        sudo rm -rf openwrt-actions/

        # TODO 特殊处理特殊打的包
        sudo mv /home/runner/work/home/runner/work/Private-Actions-OpenWrt/ /home/runner/work
        sudo mv /home/runner/work/Private-Actions-OpenWrt /home/runner/work/openwrt-actions
        sudo mv /home/runner/work/openwrt-actions/Private-Actions-OpenWrt /home/runner/work/openwrt-actions/openwrt-actions
        # TODO 特殊处理特殊打的包

        sudo rm -rf home.tar.gz
        sudo rm -rf home/
        cd /home/runner/work/openwrt-actions/openwrt-actions
        sudo rm -rf openwrt
        ln -sf /workdir/openwrt /home/runner/work/openwrt-actions/openwrt-actions/openwrt
        sudo chown $USER:$GROUPS /workdir

    - name: 编译固件
      working-directory: /workdir
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 上传ipk等bin文件
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
