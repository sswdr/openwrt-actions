# 使用拉出的编译仓库环境编译

name: test-build

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      REPO_URL_BRANCH:
        description: '编译仓库及分支'
        required: true
        default: https://github.com/rin0612/lede -b backup.2022.04.25
      EXTRA_APPS_SH:
        description: '插件扩展仓库/feeds调整脚本'
        required: false
        default: extra-apps.sh
      CONFIG_FILE:
        description: '.config编译配置'
        required: true
        default: build.config/backup_build_env_2022.04.25.1800/general-v2.config
      MYCONFIG:
        description: '自定义配置: 主机ip地址、主机名、内核版本、默认主题(luci-theme-bootstrap/luci-theme-argonne,在.config必须包含这个主题)'
        required: true
        default: "{\"HOST_IP\":\"192.168.5.25\",\"HOST_NAME\":\"sswOpenWrt\",\"KERNEL_PATCHVER\":\"5.10\",\"DEFAULT_THEME\":\"luci-theme-argonne\"}"
      MAKE_DEFCONFIG:
        description: '是否执行make defconfig(不执行make defconfig将以当前.config直接编译,修改仓库时不会引入其他默认选上的不需要的依赖)'
        required: true
        default: false
      BACKUP_ENV_URL:
        description: '是否加载离线编译环境中的dl包, 为空则通过Makefile下载对应dl, 导入后会跳过下载'
        required: false
        default: https://github.com/sswdr/openwrt-actions/releases/download/backup_build_env_2024.02.17.0052/workdir.tar.gz
      UPLOAD_BIN_DIR:
        description: '是否上传编译完成后的bin文件夹到actions的artifact'
        required: true
        default: true

env:
  REPO_URL_BRANCH: ${{ github.event.inputs.REPO_URL_BRANCH }}
  EXTRA_APPS_SH: ${{ github.event.inputs.EXTRA_APPS_SH }}
  CONFIG_FILE: ${{ github.event.inputs.CONFIG_FILE }}
  MYCONFIG_HOST_IP: ${{fromJSON(github.event.inputs.MYCONFIG).HOST_IP}}
  MYCONFIG_HOST_NAME: ${{fromJSON(github.event.inputs.MYCONFIG).HOST_NAME}}
  MYCONFIG_KERNEL_PATCHVER: ${{fromJSON(github.event.inputs.MYCONFIG).KERNEL_PATCHVER}}
  MYCONFIG_DEFAULT_THEME: ${{fromJSON(github.event.inputs.MYCONFIG).DEFAULT_THEME}}
  MAKE_DEFCONFIG: ${{ github.event.inputs.MAKE_DEFCONFIG }}
  BACKUP_ENV_URL: ${{ github.event.inputs.BACKUP_ENV_URL }}
  UPLOAD_BIN_DIR: ${{ github.event.inputs.UPLOAD_BIN_DIR }}

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 获取服务器信息,解除当前用户限制,设置时区
      run: |
        echo "CPU物理数量: $(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
        echo "已安装内存详细信息: " && sudo lshw -short -C memory | grep GiB
        echo -e  "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)"
        echo "硬盘详情: " && df -Th
        echo "解除当前用户限制 $USER $(date +"%Y%m%d%H%M")"
        ulimit -u 10000
        ulimit -n 4096
        ulimit -d unlimited
        ulimit -m unlimited
        ulimit -s unlimited
        ulimit -t unlimited
        ulimit -v unlimited
        echo "设置时区,方便看正常日志的时间: Asia/Shanghai"
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        # 此处安装编译所需的依赖来自lede readme.md中, 原先使用的sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004), 来自P3TERX
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        # 清理多余文件, 腾出磁盘空间
        # sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell mysql* php* mssql-tools msodbcsql17 android*
        # sudo rm -rf /etc/mysql /etc/php /swapfile
        docker rmi $(docker images -q)
        # 编译的work目录
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir

    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 更新feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        cd openwrt
        echo "--------自定义配置-主机ip地址: $MYCONFIG_HOST_IP"
        sed -i "s/192.168.1.1/$MYCONFIG_HOST_IP/g" package/base-files/files/bin/config_generate
        echo "--------自定义配置-主机名: $MYCONFIG_HOST_NAME"
        sed -i "s/OpenWrt/$MYCONFIG_HOST_NAME/g" package/base-files/files/bin/config_generate
        echo "--------自定义配置-内核版本: $MYCONFIG_KERNEL_PATCHVER"
        sed -i "s/KERNEL_PATCHVER:=.*/KERNEL_PATCHVER:=$MYCONFIG_KERNEL_PATCHVER/g" target/linux/armvirt/Makefile
        echo "--------自定义配置-默认主题: $MYCONFIG_DEFAULT_THEME"
        sed -i "s/luci-theme-bootstrap/$MYCONFIG_DEFAULT_THEME/g" ./feeds/luci/collections/luci/Makefile
        echo "--------自定义配置-build信息"
        sed -i 's/OpenWrt /杀生丸大人 Build $(TZ=UTC-8 date "+%Y.%m.%d") @ OpenWrt /g' package/lean/default-settings/files/zzz-default-settings
        echo "--------其他通用配置-添加autocore-arm支持可配置, 需要手动在.config/make menuconfig中选择启用"
        sed -i 's/TARGET_rockchip/TARGET_rockchip\|\|TARGET_armvirt/g' package/lean/autocore/Makefile

    - name: 加载扩展仓库
      run: |
        if [ -e "$EXTRA_APPS_SH" ]; then
          echo "注意: 加载扩展仓库之前, 务必先安装feeds和更新feeds, 否则会一堆依赖不全"
          echo "加载扩展仓库, 将执行以下内容: " && cat $EXTRA_APPS_SH && echo "开始执行: "
          chmod +x $EXTRA_APPS_SH
          cd openwrt
          $GITHUB_WORKSPACE/$EXTRA_APPS_SH
        else
          echo "加载扩展仓库: 跳过"
        fi

    - name: 准备files文件夹
      run: |
        if [ -e files ]; then
          mv files openwrt/files
          echo "当前仓库存在files文件夹,将替换到openwrt/files"
        else
          echo "当前仓库不存在files文件夹,将不替换到openwrt/files,跳过"
        fi

    - name: 准备.config文件
      run: |
        cp $CONFIG_FILE openwrt/.config
        echo "复制仓库下$CONFIG_FILE,替换到openwrt/.config"
        ls -alh openwrt/.config && cat openwrt/.config

    - name: 执行make defconfig
      run: |
        cd openwrt
        if [ "$MAKE_DEFCONFIG" = true ]; then
            echo "开始执行make defconfig, 将.config文件匹配为适用于当前平台和硬件环境的配置文件"
            echo "注意: 部分.config配置中的配置讲会重置为默认选项"
            echo "--------执行前--------" && ls -alh .config && cat .config
            make defconfig
            echo "--------执行后--------" && ls -alh .config && cat .config
        else
            echo "跳过执行make defconfig, 将直接使用.config中的配置编译" && ls -alh | grep -w .config && cat .config
        fi

    - name: 准备编译所需的文件依赖项或资源
      run: |
        cd openwrt
        [ -n "$BACKUP_ENV_URL" ] && {
            echo "开始加载离线编译环境中的dl包"
            wget -q $BACKUP_ENV_URL
            echo "下载成功: " && ls -alh ./ | grep *.tar.gz
            sudo tar -zxf workdir.tar.gz && sudo rm workdir.tar.gz
            rm -rf ./dl && cp -R workdir/openwrt/dl ./ && rm -rf workdir
            sudo chown -R $USER:$GROUPS /mnt/workdir
            echo "加载离线编译环境中的dl包: " && ls -alh ./dl
        }
        echo "开始执行: make download -j8"
        make download -j8

    - name: 编译固件
      run: |
        cd openwrt
        echo -e "开始编译: $(date +"%Y%m%d%H%M") start $(nproc) thread compile,先多线程,失败则单线程,再失败则详细日志的单线程"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "结束编译: $(date +"%Y%m%d%H%M") success"
        echo "结束编译后的dl文件夹目录: " && ls -alh ./dl
        echo "BUILD_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 上传编译完成后的bin文件夹到actions的artifact
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: openwrt_bin_${{ env.BUILD_DATE }}
        path: /mnt/workdir/openwrt/bin
