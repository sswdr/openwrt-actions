# 使用拉出的编译仓库环境编译

name: test

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      repo_url_branch:
        description: '编译仓库及分支'
        required: true
        default: https://github.com/rin0612/lede -b backup.2022.04.25
      backup_env_url:
        description: '是否加载离线编译环境中的dl包(值为false则只通过Makefile下载对应dl,为链接则导入文件后会通过hash值校验通过则跳过下载)'
        required: false
        default: https://github.com/sswdr/openwrt-actions/releases/download/backup_build_env_2024.02.17.0052/workdir.tar.gz
      extra_apps_sh:
        description: '插件扩展仓库/feeds调整脚本'
        required: false
        default: extra-apps.sh
      config_file:
        description: '编译配置.config文件'
        required: true
        default: build.config/backup_build_env_2022.04.25.1800/general-v2.config
      make_defconfig:
        description: '是否执行make defconfig(不执行make defconfig将以当前.config直接编译,修改仓库时不会引入其他默认选上的不需要的依赖)'
        required: true
        default: false
      build_config:
        description: '自定义配置: 主机ip地址,主机名,内核版本,默认主题(luci-theme-bootstrap/luci-theme-argonne,在.config必须包含这个主题)'
        required: true
        default: "{\"host_ip\":\"192.168.5.25\",\"host_name\":\"sswOpenWrt\",\"kernel_patchver\":\"5.10\",\"default_theme\":\"luci-theme-argonne\"}"
      output_config:
        description: '编译输出配置: 编译bin到artifact,编译env到artifact,编译env带dl到artifact,编译bin到releases,编译env到releases,编译env带dl到releases'
        required: true
        default: "{\"artifact_bin\":true,\"artifact_env\":true,\"artifact_env_dl\":true,\"releases_bin\":true,\"releases_env\":true,\"releases_env_dl\":true}"

env:
  repo_url_branch: ${{ github.event.inputs.repo_url_branch }}
  backup_env_url: ${{ github.event.inputs.backup_env_url }}
  extra_apps_sh: ${{ github.event.inputs.extra_apps_sh }}
  config_file: ${{ github.event.inputs.config_file }}
  make_defconfig: ${{ github.event.inputs.make_defconfig }}
  build_config_host_ip: ${{fromJSON(github.event.inputs.build_config).host_ip}}
  build_config_host_name: ${{fromJSON(github.event.inputs.build_config).host_name}}
  build_config_kernel_patchver: ${{fromJSON(github.event.inputs.build_config).kernel_patchver}}
  build_config_default_theme: ${{fromJSON(github.event.inputs.build_config).default_theme}}
  output_config_artifact_bin: ${{fromJSON(github.event.inputs.output_config).artifact_bin}}
  output_config_artifact_env: ${{fromJSON(github.event.inputs.output_config).artifact_env}}
  output_config_artifact_env_dl: ${{fromJSON(github.event.inputs.output_config).artifact_env_dl}}
  output_config_releases_bin: ${{fromJSON(github.event.inputs.output_config).releases_bin}}
  output_config_releases_env: ${{fromJSON(github.event.inputs.output_config).releases_env}}
  output_config_releases_env_dl: ${{fromJSON(github.event.inputs.output_config).releases_env_dl}}

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: 准备需要推送到releases的文件
      run: |
        echo "----------准备将/opt/2024/*推送到releases--------------"
        mkdir -p /opt/2024
        dd if=/dev/zero of=/opt/2024/tmp.tar.gz bs=1 count=1
        cd /opt/2024
        echo "----------保存推送文件和推送日期信息的到环境变量-------"
        echo "PACKAGED_OUTPUTDATE=$(date +"%Y.%m.%d.%H%M")" >>$GITHUB_ENV
        echo "PACKAGED_OUTPUTPATH=${PWD}" >>$GITHUB_ENV

    - name: 整理推送到release的env信息
      run: |
        # release body 文件
        cd / && sudo touch env.txt && sudo chown $USER:$GROUPS env.txt
        # 当前工作流使用的yml文件名称(约定文件名称 = 工作流名称.yml)
        YAML_FILE="$(echo $GITHUB_WORKFLOW | tr -d ' ' | tr -d '\n' | tr -d '\r').yml"

        echo "action yml env Json: " >> env.txt && echo "\`\`\`" >> env.txt
        echo "${{ toJson(env) }}" >> env.txt && echo "\`\`\`" >> env.txt
        
        if [ -e "$extra_apps_sh" ]; then
          echo "$EXTRA_APPS_SH: " >> env.txt && echo "\`\`\`" >> env.txt
          cat $GITHUB_WORKSPACE/$EXTRA_APPS_SH >> env.txt && echo "\`\`\`" >> env.txt
        fi
        
        echo "current workflow file name: $YAML_FILE, content: " >> env.txt && echo "\`\`\`" >> env.txt
        cat $GITHUB_WORKSPACE/.github/workflows/$YAML_FILE >> env.txt && echo "\`\`\`" >> env.txt
        
        echo "env信息: " && cat /env.txt
        # release-action 环境变量设置
        echo "PACKAGED_OUTPUTPATH=/*.tar.gz" >>$GITHUB_ENV
        echo "PACKAGED_OUTPUTDATE=$(date +"%Y.%m.%d.%H%M")" >>$GITHUB_ENV
        echo "RELEASES_BODY_FILE=/env.txt" >>$GITHUB_ENV

    - name: 推送文件到releases,如果tag不存在会创建
      uses: rin0612/release-action@v1
      with:
        tag: ${{ env.PACKAGED_OUTPUTDATE }}_releases的tag
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        # 也可以是文件当releases的body
        bodyFile: ${{ env.RELEASES_BODY_FILE }}
        # 可以是直接写入releases的body
        #body: |
        #  ### **${{ env.PACKAGED_OUTPUTDATE }}_releases的body适用于md语法**

    - name: Display current YAML file name and content
      run: |
        YAML_FILE="$(echo $GITHUB_WORKFLOW | tr -d ' ' | tr -d '\n' | tr -d '\r').yml"
        echo "当前工作流运行的.yml: $YAML_FILE, 内容: " && cat $GITHUB_WORKSPACE/.github/workflows/$YAML_FILE

    - name: or
      if: env.output_config_artifact_bin == 'true' || env.output_config_releases_bin == 'true'
      run: |
        echo $output_config_artifact_bin
        echo $output_config_artifact_env
        echo $output_config_releases_env_dl

    - name: if_output_config_artifact_bin_string
      if: env.output_config_artifact_bin == 'true'
      run: |
        echo $output_config_artifact_bin
        echo $output_config_artifact_env
        echo $output_config_releases_env_dl

    - name: if_output_config_artifact_bin_bool
      if: env.output_config_artifact_bin == true
      run: |
        echo $output_config_artifact_bin
        echo $output_config_artifact_env
        echo $output_config_releases_env_dl

    - name: if_not_null
      if: env.backup_env_url != ''
      run: |
        echo $backup_env_url

    - name: if_null
      if: env.backup_env_url == ''
      run: |
        echo $backup_env_url

    - name: test
      run: |
        echo test
        [ -n "$backup_env_url" ] && {
            echo 001
            echo $backup_env_url
        }

    - name: 准备编译所需的文件依赖项或资源
      run: |
        echo 0
        if [ "$backup_env_url" != false ]; then
          echo 1
        fi
