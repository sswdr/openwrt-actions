# 使用导出的编译环境编译

name: part-build-backup-env

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      CONFIG_FILE_URL:
        description: '.config编译配置'
        required: true
        default: https://raw.githubusercontent.com/sswdr/openwrt-actions/main/build.config/backup_build_env_2022.04.25.1800/min-v1.config
      BACKUP_ENV_URL:
        description: 'build-backup-env编译环境'
        required: true
        default: https://github.com/sswdr/openwrt-actions/releases/download/backup_build_env_2022.04.25.1800/workdir.tar.gz
      UPLOAD_BIN_DIR:
        description: '是否上传编译完成后的bin文件夹到actions的artifact'
        required: true
        default: true

env:
  CONFIG_FILE_URL: ${{ github.event.inputs.CONFIG_FILE_URL }}
  BACKUP_ENV_URL: ${{ github.event.inputs.BACKUP_ENV_URL }}
  UPLOAD_BIN_DIR: ${{ github.event.inputs.UPLOAD_BIN_DIR }}

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: 获取服务器信息,解除当前用户限制,设置时区
      run: |
        echo "CPU物理数量: $(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
        echo "已安装内存详细信息: " && sudo lshw -short -C memory | grep GiB
        echo -e  "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)"
        echo "硬盘详情: " && df -Th
        echo "解除当前用户限制 $USER $(date +"%Y%m%d%H%M")"
        ulimit -u 10000
        ulimit -n 4096
        ulimit -d unlimited
        ulimit -m unlimited
        ulimit -s unlimited
        ulimit -t unlimited
        ulimit -v unlimited
        echo "设置时区,方便看正常日志的时间: Asia/Shanghai"
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        # 此处安装编译所需的依赖来自lede readme.md中，原先使用的sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)，来自P3TERX
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        # 清理多余文件，腾出磁盘空间
        # sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell mysql* php* mssql-tools msodbcsql17 android*
        # sudo rm -rf /etc/mysql /etc/php /swapfile
        docker rmi $(docker images -q)
        # 编译的work目录
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 下载export-build-env
      working-directory: /
      run: |
        sudo wget -q -P / $BACKUP_ENV_URL
        echo "下载成功: $BACKUP_ENV_URL" && ls -alh / | grep *.tar.gz
        sudo tar -zxf workdir.tar.gz && sudo rm workdir.tar.gz
        wget -q -O /workdir/openwrt/.config -N $CONFIG_FILE_URL
        sudo chown -R $USER:$GROUPS /workdir
        echo "准备完成: /workdir/openwrt" && ls -alh /workdir/openwrt
        # echo "编译配置: /workdir/openwrt/.config" && cat /workdir/openwrt/.config
        echo "更新编译时间信息 $(TZ=UTC-8 date "+%Y.%m.%d")"
        sed -i "s/[0-9]\{4\}\.[0-9]\{2\}\.[0-9]\{2\}/$(TZ=UTC-8 date "+%Y.%m.%d")/" /workdir/openwrt/package/lean/default-settings/files/zzz-default-settings

#    # TODO 待整理这部分的内容
#    - name: 编译固件前,处理编译错误的问题
#      run: |
#        echo "TODO 2024 处理phylink编译报错" && cd /workdir/openwrt
#        sed -i '114s/DEPENDS:=+kmod-libphy/DEPENDS:=+kmod-libphy +kmod-of-mdio/' package/kernel/linux/modules/netdevices.mk
#        echo "TODO 2024 处理xfsprogs编译报错" && cd /workdir/openwrt
#        sed -i 's/TARGET_CFLAGS += -DHAVE_MAP_SYNC/TARGET_CFLAGS += -DHAVE_MAP_SYNC -D_LARGEFILE64_SOURCE/' feeds/packages/utils/xfsprogs/Makefile
#        # echo "TODO 2024 这里有个依赖下载不上,目前已正常(执行make download -j8前处理)" && cd /workdir/openwrt
#        # sed -i 's/https/http/' toolchain/fortify-headers/Makefile
#        echo "TODO 2024 处理hostapd wpa_supplicant-full编译报错" && cd /workdir/openwrt
#        sed -i 's/#CONFIG_AP=y/CONFIG_AP=y/' package/network/services/hostapd/files/wpa_supplicant-full.config
#        # echo "TODO 2022 处理下载miniupnpd失败(执行make download -j8前处理)" && cd /workdir/openwrt
#        # sed -i 's/free.fr/tuxfamily.org/' feeds/packages/net/miniupnpd/Makefile

    - name: 执行make defconfig
      working-directory: /workdir/openwrt
      run: |
        echo "执行前: " && ls -alh | grep -w .config
        echo "执行make defconfig,将.config文件匹配为适用于当前平台和硬件环境的配置文件"
        make defconfig
        echo "执行后: " && ls -alh | grep -w .config

    - name: 编译固件
      working-directory: /workdir/openwrt
      run: |
        echo -e "开始编译: $(date +"%Y%m%d%H%M") start $(nproc) thread compile,先多线程,失败则单线程,再失败则详细日志的单线程"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "结束编译: $(date +"%Y%m%d%H%M") success"
        echo "结束编译后的dl文件夹目录: " && ls -alh ./dl
        echo "BUILD_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 上传编译完成后的bin文件夹到actions的artifact
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: openwrt_bin_${{ env.BUILD_DATE }}
        path: /workdir/openwrt/bin
